#version 330 core

in vec3 passColor;
in vec3 normal;
in vec3 fragPos;
out vec4 FragColor;

uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 lightColor;

vec3 ambientLight = vec3(0.3);

void main()
{
	vec3 ambient = ambientLight;

	vec3 lightDir = normalize(lightPos - fragPos);
	float diffuseLight = max (dot (normal, lightDir), 0.0);
	vec3 diffuse = diffuseLight * lightColor;

	int shininess = 32;
	vec3 viewDir = normalize(fragPos - viewPos);
	vec3 reflectDir = reflect(lightDir, normal);
	float specularColor = max(dot(viewDir, reflectDir),0.0);
	specularColor = pow(specularColor, shininess);
	vec3 specular = specularColor * lightColor;

	vec3 result = (ambient + diffuse + specular) * passColor;
	FragColor = vec4 (result, 1.0f);
}